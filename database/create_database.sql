/*
SCRIPT PARA CRIAÇÃO DO BANCO DE DADOS

Disciplina: SCC-240 - Base de Dados (2019/2)
Projeto: Game XP
Foco: Gerenciamento de competição de cosplay
Alunos:
	Luiz Guilherme Martins Adorno - 10392171
	Murilo Kazumi de Freitas - 10818988
	Vinícius Gonçalves de Carvalho - 8517157
*/

CREATE TABLE PALCO(
    NUMERO NUMBER(3) NOT NULL,
    SETOR VARCHAR2(3),
    CONSTRAINT PK_PALCO PRIMARY KEY (NUMERO)
);

/* 
Criação da tabela para competidor:
	Note que um competidor precisa necessariamente ter um tipo, seja ele Solo ou Grupo.
	É realizada uma verificação do tipo inserido (CK_TIPO_COMP) e o valor padrão para tipo é o de competidor Solo.
*/ 
CREATE TABLE COMPETIDOR(
    INSCRICAO NUMBER(5) NOT NULL,
    TIPO VARCHAR2(5) DEFAULT 'SOLO',
    NRO_PONTOS NUMBER(3),
    PALCO NUMBER(3),
    CONSTRAINT CK_TIPO_COMP CHECK(TIPO IN('SOLO', 'GRUPO')),
    CONSTRAINT FK_COMPETIDOR FOREIGN KEY (PALCO) REFERENCES PALCO (NUMERO),
    CONSTRAINT PK_COMPETIDOR PRIMARY KEY (INSCRICAO)
);

CREATE TABLE GRUPO(
    INSCRICAO NUMBER(5) NOT NULL,
    QTD_PESSOAS NUMBER(2),
    CONSTRAINT FK_GRUPO FOREIGN KEY (INSCRICAO) REFERENCES COMPETIDOR (INSCRICAO),
    CONSTRAINT PK_GRUPO PRIMARY KEY (INSCRICAO)
);

CREATE TABLE COSPLAYER(
    CPF NUMBER(14) NOT NULL,
    NOME VARCHAR2(50),
    NOME_PERSONAGEM VARCHAR2(50),
    ORIGEM_PERSONAGEM VARCHAR2(50),
    TELEFONE VARCHAR2(20),
    NRO_VOTOS NUMBER(3),
    ENDERECO VARCHAR2(50),
    GRUPO NUMBER(3),
    CONSTRAINT FK_COSPLAYER FOREIGN KEY (GRUPO) REFERENCES GRUPO (INSCRICAO),
    CONSTRAINT PK_COSPLAYER PRIMARY KEY (CPF)
);

CREATE TABLE VOTANTE(
    CPF NUMBER(14) NOT NULL,
    EMAIL VARCHAR2(40),
    COSPLAYER NUMBER(14) NOT NULL,
    CONSTRAINT FK_VOTANTE FOREIGN KEY (COSPLAYER) REFERENCES COSPLAYER (CPF),
    CONSTRAINT PK_VOTANTE PRIMARY KEY (CPF)
);

CREATE TABLE SOLO(
    INSCRICAO NUMBER(5) NOT NULL,
    COSPLAYER NUMBER(14) NOT NULL,
    CONSTRAINT FK_SOLO_INSC FOREIGN KEY (INSCRICAO) REFERENCES COMPETIDOR (INSCRICAO),
    CONSTRAINT FK_SOLO_COSP FOREIGN KEY (COSPLAYER) REFERENCES COSPLAYER (CPF),
    CONSTRAINT PK_SOLO PRIMARY KEY (INSCRICAO)
);

CREATE TABLE CAMARIM(
    NUMERO NUMBER(4) NOT NULL,
    SETOR VARCHAR2(3),
    CONSTRAINT PK_CAMARIM PRIMARY KEY (NUMERO)
);

CREATE TABLE UTILIZA(
    COMPETIDOR NUMBER(5) NOT NULL,
    CAMARIM NUMBER(4) NOT NULL,
    QTD_PESSOAS NUMBER (2),
    CONSTRAINT FK_UTILIZA_COMP FOREIGN KEY (COMPETIDOR) REFERENCES COMPETIDOR (INSCRICAO),
    CONSTRAINT FK_UTILIZA_CAMA FOREIGN KEY (CAMARIM) REFERENCES CAMARIM (NUMERO),
    CONSTRAINT PK_UTILIZA PRIMARY KEY (COMPETIDOR, CAMARIM)
);

CREATE TABLE HOTEL(
    CNPJ NUMBER(20) NOT NULL,
    NOME VARCHAR2(50),
    ENDERECO VARCHAR2(50),
    TELEFONE VARCHAR2(20),
    CONSTRAINT PK_HOTEL PRIMARY KEY (CNPJ)
);

CREATE TABLE HOSPEDA(
    COMPETIDOR NUMBER(5) NOT NULL,
    HOTEL NUMBER(20),
    QUARTO NUMBER(4),
    QTD_HOSPEDES NUMBER(2),
    CONSTRAINT FK_HOSPEDA FOREIGN KEY (HOTEL) REFERENCES HOTEL (CNPJ),
    CONSTRAINT PK_HOSPEDA PRIMARY KEY (COMPETIDOR)
);

/*
Criação de tablea para as fotos:
    Note que há um único arquivo armazenado. Este arquivo é uma pasta compactada contendo todas as fotos do competidor e copslayer.
    Outras informações sobre as fotos se encontram nos outros atributos, como tamanho total, quantidade de fotos e nome do fotógrafo responsável.
*/
CREATE TABLE FOTOS(
    COSPLAYER NUMBER(14) NOT NULL,
    ARQUIVO BLOB,
    QTD_FOTOS NUMBER(3),
    TAM_FOTOS NUMBER(10),
    NOME_FOTOGRAFO VARCHAR2(50),
    CONSTRAINT FK_FOTOS FOREIGN KEY (COSPLAYER) REFERENCES COSPLAYER (CPF),
    CONSTRAINT PK_FOTOS PRIMARY KEY (COSPLAYER)
);

/*/
Criação de tabela para funcionários:
    Note que é possível que haja um funcionário sem tipo mas caso um tipo seja definido ele precisa ser Apresentador ou Técnico.
*/
CREATE TABLE FUNCIONARIOS(
    CPF NUMBER(14) NOT NULL,
    NOME VARCHAR2(50),
    TIPO VARCHAR2(12),
    TELEFONE VARCHAR2(20),
    HORAS_TRAB NUMBER(3),
    ENDERECO VARCHAR2(50),
    TURNO VARCHAR2(10),
    CONSTRAINT CK_TIPO_FUNC CHECK(TIPO IN('APRESENTADOR', 'TÉCNICO')),
    CONSTRAINT PK_FUNC PRIMARY KEY (CPF)
);

CREATE TABLE POSSUI(
    PALCO NUMBER(3) NOT NULL,
    FUNCIONARIO NUMBER(14) NOT NULL,
    CONSTRAINT FK_POSSUI_PALCO FOREIGN KEY (PALCO) REFERENCES PALCO (NUMERO),
    CONSTRAINT FK_POSSUI_FUNC FOREIGN KEY (FUNCIONARIO) REFERENCES FUNCIONARIOS (CPF),
    CONSTRAINT PK_POSSUI PRIMARY KEY (PALCO, FUNCIONARIO)
);

CREATE TABLE TECNICO(
    CPF NUMBER(14) NOT NULL,
    ESPECIALIZACAO VARCHAR2(30),
    CONSTRAINT FK_TECNICO FOREIGN KEY (CPF) REFERENCES FUNCIONARIOS (CPF),
    CONSTRAINT PK_TECNICO PRIMARY KEY (CPF)
);

CREATE TABLE APRESENTADOR(
    CPF NUMBER(14) NOT NULL,
    TEMPO_PALCO NUMBER(3),
    CONSTRAINT FK_APRESENTADOR FOREIGN KEY (CPF) REFERENCES FUNCIONARIOS (CPF),
    CONSTRAINT PK_APRESENTADOR PRIMARY KEY (CPF)
);

CREATE TABLE JURADOS(
    CPF NUMBER(14) NOT NULL,
    NOME VARCHAR2(50),
    TELEFONE VARCHAR2(20),
    EMAIL VARCHAR2(40),
    CONSTRAINT PK_JURADOS PRIMARY KEY (CPF)
);

CREATE TABLE APRESENTACAO(
    COMPETIDOR NUMBER(5) NOT NULL,
    DATA_HORA DATE NOT NULL,
    MATERIAL_APOIO VARCHAR2(20) NOT NULL,
    CONSTRAINT FK_APRESENTACAO FOREIGN KEY (COMPETIDOR) REFERENCES COMPETIDOR (INSCRICAO),
    CONSTRAINT PK_APRESENTACAO PRIMARY KEY (COMPETIDOR, DATA_HORA)
);

CREATE TABLE AVALIA(
    COMPETIDOR NUMBER(5) NOT NULL,
    DATA_HORA DATE NOT NULL,
    JURADO NUMBER(14) NOT NULL,
    CONSTRAINT FK_AVALIA_APR FOREIGN KEY (COMPETIDOR, DATA_HORA) REFERENCES APRESENTACAO (COMPETIDOR, DATA_HORA),
    CONSTRAINT FK_AVALIA_JUR FOREIGN KEY (JURADO) REFERENCES JURADOS (CPF),
    CONSTRAINT PK_AVALIA PRIMARY KEY (COMPETIDOR, DATA_HORA, JURADO)
);

CREATE TABLE AVALIACAO(
    COMPETIDOR NUMBER(5) NOT NULL,
    DATA_HORA DATE NOT NULL,
    JURADO NUMBER(14) NOT NULL,
    TIPO VARCHAR2(15) NOT NULL,
    NRO_PONTOS NUMBER(3),
    CONSTRAINT FK_AVALIACAO_APR FOREIGN KEY (COMPETIDOR, DATA_HORA) REFERENCES APRESENTACAO (COMPETIDOR, DATA_HORA),
    CONSTRAINT FK_AVALIACAO_JUR FOREIGN KEY (JURADO) REFERENCES JURADOS (CPF),
    CONSTRAINT PK_AVALIACAO PRIMARY KEY (COMPETIDOR, DATA_HORA, JURADO, TIPO)
);